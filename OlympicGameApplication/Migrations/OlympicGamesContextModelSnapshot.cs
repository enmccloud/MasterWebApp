// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OlympicGameApplication.Models;

namespace OlympicGameApplication.Migrations
{
    [DbContext(typeof(OlympicGamesContext))]
    partial class OlympicGamesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OlympicGameApplication.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName");

                    b.Property<int>("GameTypeID");

                    b.Property<int>("Indoor_OutdoorID");

                    b.Property<int>("SportID");

                    b.HasKey("CountryID");

                    b.HasIndex("GameTypeID");

                    b.HasIndex("Indoor_OutdoorID");

                    b.HasIndex("SportID");

                    b.ToTable("Countries");

                    b.HasData(
                        new { CountryID = 1, CountryName = "Austria", GameTypeID = 1, Indoor_OutdoorID = 2, SportID = 4 },
                        new { CountryID = 2, CountryName = "Brazil", GameTypeID = 2, Indoor_OutdoorID = 2, SportID = 7 },
                        new { CountryID = 3, CountryName = "Canada", GameTypeID = 3, Indoor_OutdoorID = 1, SportID = 5 },
                        new { CountryID = 4, CountryName = "China", GameTypeID = 2, Indoor_OutdoorID = 1, SportID = 6 },
                        new { CountryID = 5, CountryName = "Cyprus", GameTypeID = 4, Indoor_OutdoorID = 1, SportID = 3 },
                        new { CountryID = 6, CountryName = "Finland", GameTypeID = 4, Indoor_OutdoorID = 2, SportID = 8 },
                        new { CountryID = 7, CountryName = "France", GameTypeID = 4, Indoor_OutdoorID = 1, SportID = 3 },
                        new { CountryID = 8, CountryName = "Germany", GameTypeID = 2, Indoor_OutdoorID = 1, SportID = 6 },
                        new { CountryID = 9, CountryName = "Great Britain", GameTypeID = 3, Indoor_OutdoorID = 1, SportID = 5 },
                        new { CountryID = 10, CountryName = "Italy", GameTypeID = 3, Indoor_OutdoorID = 2, SportID = 2 },
                        new { CountryID = 11, CountryName = "Jamaica", GameTypeID = 3, Indoor_OutdoorID = 2, SportID = 2 },
                        new { CountryID = 12, CountryName = "Japan", GameTypeID = 3, Indoor_OutdoorID = 2, SportID = 2 },
                        new { CountryID = 13, CountryName = "Mexico", GameTypeID = 2, Indoor_OutdoorID = 1, SportID = 6 },
                        new { CountryID = 14, CountryName = "Netherlands", GameTypeID = 2, Indoor_OutdoorID = 2, SportID = 7 },
                        new { CountryID = 15, CountryName = "Pakistan", GameTypeID = 1, Indoor_OutdoorID = 2, SportID = 4 },
                        new { CountryID = 16, CountryName = "Portugal", GameTypeID = 4, Indoor_OutdoorID = 2, SportID = 8 },
                        new { CountryID = 17, CountryName = "Russia", GameTypeID = 4, Indoor_OutdoorID = 1, SportID = 3 },
                        new { CountryID = 18, CountryName = "Slovakia", GameTypeID = 4, Indoor_OutdoorID = 2, SportID = 8 },
                        new { CountryID = 19, CountryName = "Sweden", GameTypeID = 3, Indoor_OutdoorID = 1, SportID = 5 },
                        new { CountryID = 20, CountryName = "Thailand", GameTypeID = 1, Indoor_OutdoorID = 2, SportID = 1 },
                        new { CountryID = 21, CountryName = "Ukraine", GameTypeID = 1, Indoor_OutdoorID = 2, SportID = 1 },
                        new { CountryID = 22, CountryName = "Uruguay", GameTypeID = 1, Indoor_OutdoorID = 2, SportID = 1 },
                        new { CountryID = 23, CountryName = "USA", GameTypeID = 2, Indoor_OutdoorID = 2, SportID = 7 },
                        new { CountryID = 24, CountryName = "Zimbabwe", GameTypeID = 1, Indoor_OutdoorID = 2, SportID = 4 }
                    );
                });

            modelBuilder.Entity("OlympicGameApplication.Models.GameType", b =>
                {
                    b.Property<int>("GameTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameTypeName");

                    b.HasKey("GameTypeID");

                    b.ToTable("GameTypes");

                    b.HasData(
                        new { GameTypeID = 1, GameTypeName = "Paralympics" },
                        new { GameTypeID = 2, GameTypeName = "Summer Olympics" },
                        new { GameTypeID = 3, GameTypeName = "Winter Olympics" },
                        new { GameTypeID = 4, GameTypeName = "Youth Olympic Games" }
                    );
                });

            modelBuilder.Entity("OlympicGameApplication.Models.Indoor_Outdoor", b =>
                {
                    b.Property<int>("Indoor_OutdoorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Indoor_OutdoorType");

                    b.HasKey("Indoor_OutdoorID");

                    b.ToTable("IndoorOutdoorTypes");

                    b.HasData(
                        new { Indoor_OutdoorID = 1, Indoor_OutdoorType = "Indoor" },
                        new { Indoor_OutdoorID = 2, Indoor_OutdoorType = "OutDoor" }
                    );
                });

            modelBuilder.Entity("OlympicGameApplication.Models.Sport", b =>
                {
                    b.Property<int>("SportID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Indoor_OutdoorID");

                    b.Property<int>("Indoor_OutdoorType");

                    b.Property<string>("SportName");

                    b.HasKey("SportID");

                    b.HasIndex("Indoor_OutdoorID");

                    b.ToTable("Sports");

                    b.HasData(
                        new { SportID = 1, Indoor_OutdoorType = 0, SportName = "Archery" },
                        new { SportID = 2, Indoor_OutdoorType = 0, SportName = "Bobsleigh" },
                        new { SportID = 3, Indoor_OutdoorType = 0, SportName = "Break Dancing" },
                        new { SportID = 4, Indoor_OutdoorType = 0, SportName = "Canoe Sprint" },
                        new { SportID = 5, Indoor_OutdoorType = 0, SportName = "Curling" },
                        new { SportID = 6, Indoor_OutdoorType = 0, SportName = "Diving" },
                        new { SportID = 7, Indoor_OutdoorType = 0, SportName = "Road Cycling" },
                        new { SportID = 8, Indoor_OutdoorType = 0, SportName = "Skateboarding" }
                    );
                });

            modelBuilder.Entity("OlympicGameApplication.Models.Country", b =>
                {
                    b.HasOne("OlympicGameApplication.Models.GameType", "GameType")
                        .WithMany()
                        .HasForeignKey("GameTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OlympicGameApplication.Models.Indoor_Outdoor", "Indoor_Outdoor")
                        .WithMany()
                        .HasForeignKey("Indoor_OutdoorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OlympicGameApplication.Models.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OlympicGameApplication.Models.Sport", b =>
                {
                    b.HasOne("OlympicGameApplication.Models.Indoor_Outdoor", "Indoor_Outdoor")
                        .WithMany()
                        .HasForeignKey("Indoor_OutdoorID");
                });
#pragma warning restore 612, 618
        }
    }
}
